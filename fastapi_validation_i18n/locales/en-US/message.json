{
    "Object has no attribute '{attribute}'": "Object has no attribute '{attribute}'",
    "Invalid JSON: {error}": "Invalid JSON: {error}",
    "JSON input should be string, bytes or bytearray": "JSON input should be string, bytes or bytearray",
    "Recursion error - cyclic reference detected": "Recursion error - cyclic reference detected",
    "Input should be a valid dictionary or instance of {class_name}": "Input should be a valid dictionary or instance of {class_name}",
    "Input should be a valid dictionary or object to extract fields from": "Input should be a valid dictionary or object to extract fields from",
    "Input should be an instance of {class_name}": "Input should be an instance of {class_name}",
    "Input should be a dictionary or an instance of {class_name}": "Input should be a dictionary or an instance of {class_name}",
    "Field required": "Field required",
    "Field is frozen": "Field is frozen",
    "Instance is frozen": "Instance is frozen",
    "Extra inputs are not permitted": "Extra inputs are not permitted",
    "Keys should be strings": "Keys should be strings",
    "Error extracting attribute: {error}": "Error extracting attribute: {error}",
    "Input should be None": "Input should be None",
    "Input should be {expected}": "Input should be {expected}",
    "Input should be greater than {gt}": "Input should be greater than {gt}",
    "Input should be greater than or equal to {ge}": "Input should be greater than or equal to {ge}",
    "Input should be less than {lt}": "Input should be less than {lt}",
    "Input should be less than or equal to {le}": "Input should be less than or equal to {le}",
    "Input should be a finite number": "Input should be a finite number",
    "{field_type} should have at least {min_length} items after validation, not {actual_length}": "{field_type} should have at least {min_length} items after validation, not {actual_length}",
    "{field_type} should have at most {max_length} items after validation, not {actual_length}": "{field_type} should have at most {max_length} items after validation, not {actual_length}",
    "Input should be a valid string": "Input should be a valid string",
    "Input should be a string, not an instance of a subclass of str": "Input should be a string, not an instance of a subclass of str",
    "Input should be a valid string, unable to parse raw data as a unicode string": "Input should be a valid string, unable to parse raw data as a unicode string",
    "String should match pattern '{pattern}'": "String should match pattern '{pattern}'",
    "String should have at least {min_length} characters": "String should have at least {min_length} characters",
    "String should have at least {min_length} character": "String should have at least {min_length} character",
    "String should have at most {max_length} characters": "String should have at most {max_length} characters",
    "String should have at most {max_length} character": "String should have at most {max_length} character",
    "Input should be a valid dictionary": "Input should be a valid dictionary",
    "Input should be a valid mapping, error: {error}": "Input should be a valid mapping, error: {error}",
    "Input should be iterable": "Input should be iterable",
    "Error iterating over object, error: {error}": "Error iterating over object, error: {error}",
    "Input should be a valid list": "Input should be a valid list",
    "Input should be a valid tuple": "Input should be a valid tuple",
    "Input should be a valid set": "Input should be a valid set",
    "Input should be a valid boolean": "Input should be a valid boolean",
    "Input should be a valid boolean, unable to interpret input": "Input should be a valid boolean, unable to interpret input",
    "Input should be a valid integer": "Input should be a valid integer",
    "Input should be a valid integer, unable to parse string as an integer": "Input should be a valid integer, unable to parse string as an integer",
    "Unable to parse input string as an integer, exceeded maximum size": "Unable to parse input string as an integer, exceeded maximum size",
    "Input should be a valid integer, got a number with a fractional part": "Input should be a valid integer, got a number with a fractional part",
    "Input should be a multiple of {multiple_of}": "Input should be a multiple of {multiple_of}",
    "Input should be a valid number": "Input should be a valid number",
    "Input should be a valid number, unable to parse string as a number": "Input should be a valid number, unable to parse string as a number",
    "Input should be a valid bytes": "Input should be a valid bytes",
    "Data should have at least {min_length} bytes": "Data should have at least {min_length} bytes",
    "Data should have at least {min_length} byte": "Data should have at least {min_length} byte",
    "Data should have at most {max_length} bytes": "Data should have at most {max_length} bytes",
    "Data should have at most {max_length} byte": "Data should have at most {max_length} byte",
    "Value error, {error}": "Value error, {error}",
    "Assertion failed, {error}": "Assertion failed, {error}",
    "Input should be a valid date": "Input should be a valid date",
    "Input should be a valid date in the format YYYY-MM-DD, {error}": "Input should be a valid date in the format YYYY-MM-DD, {error}",
    "Input should be a valid date or datetime, {error}": "Input should be a valid date or datetime, {error}",
    "Datetimes provided to dates should have zero time - e.g. be exact dates": "Datetimes provided to dates should have zero time - e.g. be exact dates",
    "Date should be in the past": "Date should be in the past",
    "Date should be in the future": "Date should be in the future",
    "Input should be a valid time": "Input should be a valid time",
    "Input should be in a valid time format, {error}": "Input should be in a valid time format, {error}",
    "Input should be a valid datetime": "Input should be a valid datetime",
    "Input should be a valid datetime, {error}": "Input should be a valid datetime, {error}",
    "Invalid datetime object, got {error}": "Invalid datetime object, got {error}",
    "Input should be in the past": "Input should be in the past",
    "Input should be in the future": "Input should be in the future",
    "Input should not have timezone info": "Input should not have timezone info",
    "Input should have timezone info": "Input should have timezone info",
    "Timezone offset of {tz_expected} required, got 6{tz_expected}": "Timezone offset of {tz_expected} required, got 6{tz_expected}",
    "Input should be a valid timedelta": "Input should be a valid timedelta",
    "Input should be a valid timedelta, {error}": "Input should be a valid timedelta, {error}",
    "Input should be a valid frozenset": "Input should be a valid frozenset",
    "Input should be an instance of {class}": "Input should be an instance of {class}",
    "Input should be a subclass of {class}": "Input should be a subclass of {class}",
    "Input should be callable": "Input should be callable",
    "Input tag '{tag}' found using {discriminator} does not match any of the expected tags: {expected_tags}": "Input tag '{tag}' found using {discriminator} does not match any of the expected tags: {expected_tags}",
    "Unable to extract tag using discriminator {discriminator}": "Unable to extract tag using discriminator {discriminator}",
    "Arguments must be a tuple, list or a dictionary": "Arguments must be a tuple, list or a dictionary",
    "Missing required argument": "Missing required argument",
    "Unexpected keyword argument": "Unexpected keyword argument",
    "Missing required keyword only argument": "Missing required keyword only argument",
    "Unexpected positional argument": "Unexpected positional argument",
    "Missing required positional only argument": "Missing required positional only argument",
    "Got multiple values for argument": "Got multiple values for argument",
    "URL input should be a string or URL": "URL input should be a string or URL",
    "Input should be a valid URL, {error}": "Input should be a valid URL, {error}",
    "Input violated strict URL syntax rules, {error}": "Input violated strict URL syntax rules, {error}",
    "URL should have at most {max_length} characters": "URL should have at most {max_length} characters",
    "URL should have at most {max_length} character": "URL should have at most {max_length} character",
    "URL scheme should be {expected_schemes}": "URL scheme should be {expected_schemes}",
    "UUID input should be a string, bytes or UUID object": "UUID input should be a string, bytes or UUID object",
    "Input should be a valid UUID, {error}": "Input should be a valid UUID, {error}",
    "UUID version {expected_version} expected": "UUID version {expected_version} expected",
    "Decimal input should be an integer, float, string or Decimal object": "Decimal input should be an integer, float, string or Decimal object",
    "Input should be a valid decimal": "Input should be a valid decimal",
    "Decimal input should have no more than {max_digits} digits in total": "Decimal input should have no more than {max_digits} digits in total",
    "Decimal input should have no more than {max_digits} digit in total": "Decimal input should have no more than {max_digits} digit in total",
    "Decimal input should have no more than {decimal_places} decimal places": "Decimal input should have no more than {decimal_places} decimal places",
    "Decimal input should have no more than {decimal_places} decimal place": "Decimal input should have no more than {decimal_places} decimal place",
    "Decimal input should have no more than {whole_digits} digits before the decimal point": "Decimal input should have no more than {whole_digits} digits before the decimal point",
    "Decimal input should have no more than {whole_digits} digit before the decimal point": "Decimal input should have no more than {whole_digits} digit before the decimal point"
    "Input is not a valid path": "Input is not a valid path",
    "Predicate {predicate_name}failed": "Predicate {predicate_name}failed",
    "'{type_name}' instances are not allowed as a Sequence value": "'{type_name}' instances are not allowed as a Sequence value",
    "Invalid python path: {error}": "Invalid python path: {error}",
    "Input should be a valid pattern": "Input should be a valid pattern",
    "Input should be a string pattern": "Input should be a string pattern",
    "Input should be a bytes pattern": "Input should be a bytes pattern",
    "Input should be a valid regular expression": "Input should be a valid regular expression",
    "Input is not a valid IPv4 address": "Input is not a valid IPv4 address",
    "Input is not a valid IPv6 address": "Input is not a valid IPv6 address",
    "Input is not a valid IPv4 network": "Input is not a valid IPv4 network",
    "Input is not a valid IPv6 network": "Input is not a valid IPv6 network",
    "Input is not a valid IPv4 interface": "Input is not a valid IPv4 interface",
    "Input is not a valid IPv6 interface": "Input is not a valid IPv6 interface",
    "value is not a valid color: value must be a tuple, list or string": "value is not a valid color: value must be a tuple, list or string",
    "value is not a valid color: tuples must have length 3 or 4": "value is not a valid color: tuples must have length 3 or 4",
    "value is not a valid color: string not recognised as a valid color": "value is not a valid color: string not recognised as a valid color",
    "value is not a valid color: color values must be a valid number": "value is not a valid color: color values must be a valid number",
    "value is not a valid color: color values must be in the range 0 to {max_val}": "value is not a valid color: color values must be in the range 0 to {max_val}",
    "value is not a valid color: alpha values must be a valid float": "value is not a valid color: alpha values must be a valid float",
    "value is not a valid color: alpha values must be in the range 0 to 1": "value is not a valid color: alpha values must be in the range 0 to 1",
    "value is not a valid IPv4 or IPv6 address": "value is not a valid IPv4 or IPv6 address",
    "value is not a valid IPv4 or IPv6 interface": "value is not a valid IPv4 or IPv6 interface",
    "value is not a valid IPv4 or IPv6 network": "value is not a valid IPv4 or IPv6 network"
}
